MVMObject * MVM_file_get_anon_oshandle_type(MVMThreadContext *tc);
char * MVM_file_get_full_path(MVMThreadContext *tc, apr_pool_t *tmp_pool, char *path);
void MVM_file_copy(MVMThreadContext *tc, MVMString *src, MVMString *dest);
void MVM_file_append(MVMThreadContext *tc, MVMString *src, MVMString *dest);
void MVM_file_rename(MVMThreadContext *tc, MVMString *src, MVMString *dest);
void MVM_file_delete(MVMThreadContext *tc, MVMString *f);
void MVM_file_chmod(MVMThreadContext *tc, MVMString *f, MVMint64 flag);
MVMint64 MVM_file_exists(MVMThreadContext *tc, MVMString *f);
MVMObject * MVM_file_open_fh(MVMThreadContext *tc, MVMObject *type_object, MVMString *filename, MVMint64 flag);
void MVM_file_close_fh(MVMThreadContext *tc, MVMObject *oshandle);
MVMString * MVM_file_read_fhs(MVMThreadContext *tc, MVMObject *oshandle, MVMint64 length);
MVMString * MVM_file_slurp(MVMThreadContext *tc, MVMString *filename);
void MVM_file_spew(MVMThreadContext *tc, MVMString *output, MVMString *filename);
char * MVM_file_get_full_path(MVMThreadContext *tc, apr_pool_t *tmp_pool, char *path);
MVMint64 MVM_file_eof(MVMThreadContext *tc, MVMObject *oshandle);
void MVM_file_seek(MVMThreadContext *tc, MVMObject *oshandle, MVMint64 offset, MVMint64 flag);
MVMint64 MVM_file_lock(MVMThreadContext *tc, MVMObject *oshandle, MVMint64 flag);
void MVM_file_unlock(MVMThreadContext *tc, MVMObject *oshandle);
MVMObject * MVM_file_get_stdin(MVMThreadContext *tc, MVMObject *type_object);
MVMObject * MVM_file_get_stdout(MVMThreadContext *tc, MVMObject *type_object);
MVMObject * MVM_file_get_stderr(MVMThreadContext *tc, MVMObject *type_object);
