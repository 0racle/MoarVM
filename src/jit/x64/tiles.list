# Terminals: reg, mem, flag, void, expr, lab
#
# This file contains the grammar of the tiles. I'm still
# pondering how to include the C-and-dasm code


#
# Virtual Machine Values 
#
(tile: load_stack  (stack) reg 1)
(tile: load_local  (local) reg 1)
(tile: load_cu     (cu) reg 1)
(tile: load_tc     (tc) reg 1)
(tile: load_frame  (frame) reg 1)
(tile: load_vmnull (vmnull) reg 3)
#
# MEMORY TRAFFIC
#

(tile: addr  (addr reg) reg 2)
(tile: idx   (idx reg reg) reg 2)
(tile: const_reg (const) reg 2)
(tile: load_reg  (load reg) reg 5)
(tile: load_addr (load (addr reg)) reg 5)
(tile: load_idx  (load (idx reg reg)) reg 5)

(tile: store (store reg reg) void 5)
(tile: store_addr (store (addr reg) reg) void 5)
(tile: store_idx  (store (idx reg reg) reg) void 5)

(tile: copy      (copy reg) reg 1)
#
# ARITHMETIC
#

(tile: add_reg       (add reg reg) reg 2)
(tile: add_const     (add reg (const)) reg 3)
(tile: add_load_addr (add reg (load (addr reg))) reg 6)
(tile: add_load_idx  (add reg (load (idx reg reg))) reg 6)

(tile: and_reg       (and reg reg) reg 2)
(tile: and_const     (and reg (const)) reg 3)
(tile: and_load_addr (and reg (load (addr reg))) reg 6)
(tile: and_load_idx  (and reg (load (idx reg reg))) reg 6)

(tile: sub_reg       (sub reg reg) reg 2)
(tile: sub_const     (sub reg (const)) reg 3)
(tile: sub_load_addr (sub reg (load (addr reg))) reg 6)
(tile: sub_load_idx  (sub reg (load (idx reg reg))) reg 6)


#
# Tests and Comparinsons
#
(tile: nz      (nz reg) flag 2)
(tile: nz_addr (nz (load (addr reg))) flag 6)
(tile: nz_idx  (nz (load (idx reg reg))) flag 6)
(tile: nz_and  (nz (and reg reg)) flag 2)
(tile: zr      (zr reg) flag 2)

(tile: equal (eq reg reg) flag 2)
(tile: lthan (lt reg reg) flag 2)
(tile: gthan (gt reg reg) flag 2)
(tile: nequal (ne reg reg) flag 2)
(tile: lequal (le reg reg) flag 2)
(tile: gequal (ge reg reg) flag 2)

#
# CONTROL STATEMENTS
#
(tile: all     (all flag) flag 2)
(tile: if      (if flag reg) reg 2)
(tile: either  (either flag void) void 2)
(tile: when    (when flag void) void 2)
(tile: do_reg  (do void reg) reg 0)
(tile: do_void (do void void) void 0)

(tile: label   (label (const)) reg 2)

(tile: branch_label (branch (label (const))) void 2)

(tile: call_func (call (const) (arglist (carg reg))) reg 4)
(tile: call_func (call (const) (arglist (carg reg))) void 4)
(tile: call      (call reg (arglist (carg reg))) reg 4)
(tile: call      (call reg (arglist (carg reg))) void 4)

(tile: call_addr (call (load (addr reg)) (arglist (carg reg))) reg 4)
(tile: call_addr (call (load (addr reg)) (arglist (carg reg))) reg 4)