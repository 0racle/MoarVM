#include "tile_decl.h"


MVM_JIT_TILE_DECL(load_stack) {
    values[0]->type      = MVM_JIT_REG;
    values[0]->state     = MVM_JIT_VALUE_ALLOCATED;
    values[0]->reg_cls = MVM_JIT_X64_GPR;
    values[0]->reg_num = MVM_JIT_X64_RSP;
}

MVM_JIT_TILE_DECL(load_local) {
    values[0]->type      = MVM_JIT_REG;
    values[0]->state     = MVM_JIT_VALUE_ALLOCATED;
    values[0]->reg_cls = MVM_JIT_X64_GPR;
    values[0]->reg_num = MVM_JIT_X64_RBX;
}

MVM_JIT_TILE_DECL(load_frame) {
    values[0]->type      = MVM_JIT_REG;
    values[0]->state     = MVM_JIT_VALUE_ALLOCATED;
    values[0]->reg_cls = MVM_JIT_X64_GPR;
    values[0]->reg_num = MVM_JIT_X64_R12;
}

MVM_JIT_TILE_DECL(load_cu) {
    values[0]->type      = MVM_JIT_REG;
    values[0]->state     = MVM_JIT_VALUE_ALLOCATED;
    values[0]->reg_cls = MVM_JIT_X64_GPR;
    values[0]->reg_num = MVM_JIT_X64_R13;
}

MVM_JIT_TILE_DECL(load_tc) {
    values[0]->type      = MVM_JIT_REG;
    values[0]->state     = MVM_JIT_VALUE_ALLOCATED;
    values[0]->reg_cls = MVM_JIT_X64_GPR;
    values[0]->reg_num = MVM_JIT_X64_R14;
}

MVM_JIT_TILE_DECL(load_vmnull) {
    MVMint8 reg = values[0]->reg_num;
    | get_vmnull Rq(reg);
}



MVM_JIT_TILE_DECL(addr) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 base = values[1]->reg_num;
    MVMint32 ofs = args[0];
    | lea Rq(out), [Rq(base)+ofs];
}


MVM_JIT_TILE_DECL(idx) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 base = values[1]->reg_num;
    MVMint8 idx  = values[2]->reg_num;
    MVMint8 scl  = args[0];
    if (scl != 8) {
        | lea Rq(out), [Rq(base)+Rq(idx)*8];
    } else {
        MVM_oops(tc, "Scales other than 8 NYI\n");
    }
}


MVM_JIT_TILE_DECL(const_reg) {
    MVMint8 out = values[0]->reg_num;
    if (args[1] == 8 && !fits_in_32_bit(args[0])) {
        | mov64 Rq(out), args[0];
    } else {
        | mov Rq(out), args[0];
    }
}

/* Tree access macro's */
#define XS(x)      tree->nodes[x]
#define XS2(x,y)   XS(XS(x)+y)
#define XS3(x,y,z) XS(XS2(x,y)+z)


MVM_JIT_TILE_DECL(load_reg) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 base = values[1]->reg_num;
    switch (args[0]) {
    case 1:
        | mov Rb(out), [Rq(base)];
        break;
    case 2:
        | mov Rw(out), [Rq(base)];
        break;
    case 4:
        | mov Rd(out), [Rq(base)];
        break;
    case 8:
        | mov Rq(out), [Rq(base)];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", args[0]);
    }
}

MVM_JIT_TILE_DECL(load_addr) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 base = values[1]->reg_num;
    MVMint8 ofs  = XS2(node+1,2);
    switch (args[0]) {
    case 1:
        | mov Rb(out), [Rq(base)+ofs];
        break;
    case 2:
        | mov Rw(out), [Rq(base)+ofs];
        break;
    case 4:
        | mov Rd(out), [Rq(base)+ofs];
        break;
    case 8:
        | mov Rq(out), [Rq(base)+ofs];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", args[0]);
    }
}

MVM_JIT_TILE_DECL(load_idx) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 base = values[1]->reg_num;
    MVMint8 idx  = values[2]->reg_num;
    MVMint8 scl  = XS2(node+1,3);
    if (scl != 8) {
        MVM_oops(tc, "Unsupported scale size: %d\n", scl);
    }
    switch (args[0]) {
    case 1:
        | mov Rb(out), [Rq(base)+Rq(idx)*8];
        break;
    case 2:
        | mov Rw(out), [Rq(base)+Rq(idx)*8];
        break;
    case 4:
        | mov Rd(out), [Rq(base)+Rq(idx)*8];
        break;
    case 8:
        | mov Rq(out), [Rq(base)+Rq(idx)*8];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", args[0]);
    }
}


MVM_JIT_TILE_DECL(store) {
    MVMint8 base  = values[1]->reg_num;
    MVMint8 value = values[2]->reg_num;
    switch (args[0]) {
    case 1:
        | mov byte [Rq(base)], Rb(value);
        break;
    case 2:
        | mov word [Rq(base)], Rw(value);
        break;
    case 4:
        | mov dword [Rq(base)], Rd(value);
        break;
    case 8:
        | mov qword [Rq(base)], Rq(value);
        break;
    default:
        MVM_oops(tc, "Unsupported store size: %d\n", args[0]);
    }
}

MVM_JIT_TILE_DECL(store_addr) {
    MVMint8 base = values[1]->reg_num;
    MVMint8 ofs  = XS2(node+1,2);
    MVMint8 value = values[2]->reg_num;
    switch (args[0]) {
    case 1:
        | mov byte [Rq(base)+ofs], Rb(value);
        break;
    case 2:
        | mov word [Rq(base)+ofs], Rw(value);
        break;
    case 4:
        | mov dword [Rq(base)+ofs], Rd(value);
        break;
    case 8:
        | mov qword [Rq(base)+ofs], Rq(value);
        break;
    default:
        MVM_oops(tc, "Unsupported store size: %d\n", args[0]);
    }
}

MVM_JIT_TILE_DECL(store_idx) {
    MVMint8 base = values[1]->reg_num;
    MVMint8 idx  = values[2]->reg_num;
    MVMint8 scl  = XS2(node+1, 3);
    MVMint8 value = values[3]->reg_num;
    if (scl != 8)
        MVM_oops(tc, "Scale %d NYI\n", scl);
    switch (args[0]) {
    case 1:
        | mov byte [Rq(base)+Rq(idx)*8], Rb(value);
        break;
    case 2:
        | mov word [Rq(base)+Rq(idx)*8], Rw(value);
        break;
    case 4:
        | mov dword [Rq(base)+Rq(idx)*8], Rd(value);
        break;
    case 8:
        | mov qword [Rq(base)+Rq(idx)*8], Rq(value);
        break;
    default:
        MVM_oops(tc, "Unsupported store size: %d\n", args[0]);
    }

}

MVM_JIT_TILE_DECL(copy) {
    /* void implmeentation */
}

MVM_JIT_TILE_DECL(add_reg) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 in2  = values[2]->reg_num;
    if (out == in2) {
        | add Rq(out), Rq(in2);
    } else {
        | mov Rq(out), Rq(in1);
        | add Rq(out), Rq(in2);
    }
}

MVM_JIT_TILE_DECL(add_const) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint64 val = XS2(node+2, 1);
    MVMint64 sz  = XS2(node+2, 2);
    if (out == in1) {
        if (sz == 8 && !fits_in_32_bit(val)) {
            MVMint8 tmp = MVM_jit_register_alloc(tc, compiler, MVM_JIT_X64_GPR);
            | mov64 Rq(tmp), val;
            | add Rq(in1), Rq(tmp);
            MVM_jit_register_free(tc, compiler, MVM_JIT_X64_GPR, tmp);
        } else {
            | add Rq(in1), val;
        }
    } else {
        if (sz == 8 && !fits_in_32_bit(val)) {
            | mov64 Rq(out), val;
            | add Rq(out), Rq(in1);
        } else {
            | mov Rq(out), Rq(in1);
            | add Rq(out), val;
        }
    }
}

MVM_JIT_TILE_DECL(add_load_addr) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint32 ofs = XS3(node+2, 1, 2);
    if (in1 != out) {
        | mov Rq(out), Rq(in1);
    }
    switch (values[2]->size) {
    case 1:
        | add Rb(out), byte [Rq(base)+ofs];
        break;
    case 2:
        | add Rw(out), word [Rq(base)+ofs];
        break;
    case 4:
        | add Rd(out), dword [Rq(base)+ofs];
        break;
    case 8:
        | add Rq(out), qword [Rq(base)+ofs];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}

MVM_JIT_TILE_DECL(add_load_idx) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint8 idx  = values[3]->reg_num;
    MVMint32 scl = XS3(node+2, 1, 3);
    if (scl != 8)
        MVM_oops(tc, "IDX Scale %d NYI\n", scl);
    switch (values[2]->size) {
    case 1:
        | add Rb(out), byte [Rq(base)+Rq(idx)*8];
        break;
    case 2:
        | add Rw(out), word [Rq(base)+Rq(idx)*8];
        break;
    case 4:
        | add Rd(out), dword [Rq(base)+Rq(idx)*8];
        break;
    case 8:
        | add Rq(out), qword [Rq(base)+Rq(idx)*8];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}

MVM_JIT_TILE_DECL(and_reg) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 in2  = values[2]->reg_num;
    if (out == in2) {
        | and Rq(out), Rq(in2);
    } else {
        | mov Rq(out), Rq(in1);
        | and Rq(out), Rq(in2);
    }
}

MVM_JIT_TILE_DECL(and_const) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint64 val = XS2(node+2, 1);
    MVMint64 sz  = XS2(node+2, 2);
    if (out == in1) {
        if (sz == 8 && !fits_in_32_bit(val)) {
            MVMint8 tmp = MVM_jit_register_alloc(tc, compiler, MVM_JIT_X64_GPR);
            | mov64 Rq(tmp), val;
            | and Rq(in1), Rq(tmp);
            MVM_jit_register_free(tc, compiler, MVM_JIT_X64_GPR, tmp);
        } else {
            | and Rq(in1), val;
        }
    } else {
        if (sz == 8 && !fits_in_32_bit(val)) {
            | mov64 Rq(out), val;
            | and Rq(out), Rq(in1);
        } else {
            | mov Rq(out), Rq(in1);
            | and Rq(out), val;
        }
    }
}

MVM_JIT_TILE_DECL(and_load_addr) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint32 ofs = XS3(node+2, 1, 2);
    if (in1 != out) {
        | mov Rq(out), Rq(in1);
    }
    switch (values[2]->size) {
    case 1:
        | and Rb(out), byte [Rq(base)+ofs];
        break;
    case 2:
        | and Rw(out), word [Rq(base)+ofs];
        break;
    case 4:
        | and Rd(out), dword [Rq(base)+ofs];
        break;
    case 8:
        | and Rq(out), qword [Rq(base)+ofs];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}

MVM_JIT_TILE_DECL(and_load_idx) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint8 idx  = values[3]->reg_num;
    MVMint32 scl = XS3(node+2, 1, 3);
    if (scl != 8)
        MVM_oops(tc, "IDX Scale %d NYI\n", scl);
    switch (values[2]->size) {
    case 1:
        | and Rb(out), byte [Rq(base)+Rq(idx)*8];
        break;
    case 2:
        | and Rw(out), word [Rq(base)+Rq(idx)*8];
        break;
    case 4:
        | and Rd(out), dword [Rq(base)+Rq(idx)*8];
        break;
    case 8:
        | and Rq(out), qword [Rq(base)+Rq(idx)*8];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}
MVM_JIT_TILE_DECL(sub_reg) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 in2  = values[2]->reg_num;
    if (out == in2) {
        | sub Rq(out), Rq(in2);
    } else {
        | mov Rq(out), Rq(in1);
        | sub Rq(out), Rq(in2);
    }
}

MVM_JIT_TILE_DECL(sub_const) {
    MVMint8 out = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint64 val = XS2(node+2, 1);
    MVMint64 sz  = XS2(node+2, 2);
    if (out == in1) {
        if (sz == 8 && !fits_in_32_bit(val)) {
            MVMint8 tmp = MVM_jit_register_alloc(tc, compiler, MVM_JIT_X64_GPR);
            | mov64 Rq(tmp), val;
            | sub Rq(in1), Rq(tmp);
            MVM_jit_register_free(tc, compiler, MVM_JIT_X64_GPR, tmp);
        } else {
            | sub Rq(in1), val;
        }
    } else {
        if (sz == 8 && !fits_in_32_bit(val)) {
            | mov64 Rq(out), val;
            | sub Rq(out), Rq(in1);
        } else {
            | mov Rq(out), Rq(in1);
            | sub Rq(out), val;
        }
    }
}

MVM_JIT_TILE_DECL(sub_load_addr) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint32 ofs = XS3(node+2, 1, 2);
    if (in1 != out) {
        | mov Rq(out), Rq(in1);
    }
    switch (values[2]->size) {
    case 1:
        | sub Rb(out), byte [Rq(base)+ofs];
        break;
    case 2:
        | sub Rw(out), word [Rq(base)+ofs];
        break;
    case 4:
        | sub Rd(out), dword [Rq(base)+ofs];
        break;
    case 8:
        | sub Rq(out), qword [Rq(base)+ofs];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}

MVM_JIT_TILE_DECL(sub_load_idx) {
    MVMint8 out  = values[0]->reg_num;
    MVMint8 in1  = values[1]->reg_num;
    MVMint8 base = values[2]->reg_num;
    MVMint8 idx  = values[3]->reg_num;
    MVMint32 scl = XS3(node+2, 1, 3);
    if (scl != 8)
        MVM_oops(tc, "IDX Scale %d NYI\n", scl);
    switch (values[2]->size) {
    case 1:
        | sub Rb(out), byte [Rq(base)+Rq(idx)*8];
        break;
    case 2:
        | sub Rw(out), word [Rq(base)+Rq(idx)*8];
        break;
    case 4:
        | sub Rd(out), dword [Rq(base)+Rq(idx)*8];
        break;
    case 8:
        | sub Rq(out), qword [Rq(base)+Rq(idx)*8];
        break;
    default:
        MVM_oops(tc, "Unsupported load size: %d\n", values[2]->size);
    }
}


MVM_JIT_TILE_DECL(nz) {
    MVMint8 reg = values[1]->reg_num;
    | test Rq(reg), Rq(reg);
}


MVM_JIT_TILE_DECL(nz_addr) {
    MVMint8 base  = values[1]->reg_num;
    MVMint32 ofs = XS3(node+1, 1, 2);
    switch (values[1]->size) {
    case 1:
        | cmp byte [Rq(base)+ofs], 0;
        break;
    case 2:
        | cmp word [Rq(base)+ofs], 0;
        break;
    case 4:
        | cmp dword [Rq(base)+ofs], 0;
        break;
    case 8:
        | cmp qword [Rq(base)+ofs], 0;
        break;
    default:
        MVM_oops(tc, "Unsupported size %d for load\n", values[1]->size);
    }
}


MVM_JIT_TILE_DECL(nz_idx) {
    MVMint8 base = values[1]->reg_num;
    MVMint8 idx  = values[2]->reg_num;
    MVMint32 scl = XS3(node+1, 1, 3);
    if (scl != 8)
        MVM_oops(tc, "Scale %d NYI\n", scl);
    switch(values[1]->size) {
    case 1:
        | cmp byte [Rq(base)+Rq(idx)*8], 0;
        break;
    case 2:
        | cmp word [Rq(base)+Rq(idx)*8], 0;
        break;
    case 4:
        | cmp dword [Rq(base)+Rq(idx)*8], 0;
        break;
    case 8:
        | cmp qword [Rq(base)+Rq(idx)*8], 0;
        break;
    default:
        MVM_oops(tc, "Unsupported size %d for load\n", values[1]->size);
    }
}

MVM_JIT_TILE_DECL(nz_and) {
    MVMint8 rega = values[1]->reg_num;
    MVMint8 regb = values[2]->reg_num;
    switch(values[0]->size) {
    case 1:
        | test Rb(regb), Rb(rega);
        break;
    case 2:
        | test Rw(regb), Rw(rega);
        break;
    case 4:
        | test Rd(regb), Rd(rega);
        break;
    case 8:
        | test Rq(regb), Rq(rega);
        break;
    }
}

MVM_JIT_TILE_DECL(zr) {
    MVMint8 reg = values[1]->reg_num;
    switch (values[1]->size) {
    case 1:
        | test Rb(reg), Rb(reg);
        break;
    case 2:
        | test Rw(reg), Rw(reg);
        break;
    case 4:
        | test Rd(reg), Rd(reg);
        break;
    case 8:
        | test Rq(reg), Rq(reg);
        break;
    }

}

MVM_JIT_TILE_DECL(equal) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}
MVM_JIT_TILE_DECL(lthan) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}
MVM_JIT_TILE_DECL(gthan) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}
MVM_JIT_TILE_DECL(nequal) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}
MVM_JIT_TILE_DECL(lequal) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}
MVM_JIT_TILE_DECL(gequal) {
    MVMint8 regl = values[1]->reg_num;
    MVMint8 regr = values[2]->reg_num;
    switch (values[0]->size) {
    case 1:
        | test Rb(regl), Rb(regr);
        break;
    case 2:
        | test Rw(regl), Rw(regr);
        break;
    case 4:
        | test Rd(regl), Rd(regr);
        break;
    case 8:
        | test Rq(regl), Rq(regr);
        break;
    }
}



/* Placeholder tiles. Not very good to implement as postorder
   expressions. (NB my next plan is to create a linear array of tiles
   with pseudotiles in place of the tree traversal in compilation.) */
MVM_JIT_TILE_DECL(all) {
    /* not implemented as a tile */
}

MVM_JIT_TILE_DECL(if) {
    /*  */
}

MVM_JIT_TILE_DECL(either) {
    /* NYI */
}

MVM_JIT_TILE_DECL(when) {
    /* not implemented as a tile */
}

MVM_JIT_TILE_DECL(do_reg) {
    /* not really a tile */
}

MVM_JIT_TILE_DECL(do_void) {
    /* not really a tile */
}



MVM_JIT_TILE_DECL(label) {
    MVMint8 reg = values[0]->reg_num;
    MVMint32 label = XS2(node+1, 1);
    | lea Rq(reg), [=>label];
}

MVM_JIT_TILE_DECL(branch_label) {
    MVMint32 label = XS3(node+1, 1, 1);
    if (label >= 0) {
        | jmp =>(label);
    } else {
        | jmp ->exit;
    }
}



MVM_JIT_TILE_DECL(call) {
    MVMint8 reg = values[1]->reg_num;
    | call Rq(reg);
}

MVM_JIT_TILE_DECL(call_func) {
    MVMint64 constptr = XS2(node+1, 1);
    MVMint8 tmp = MVM_jit_register_alloc(tc, compiler, MVM_JIT_X64_GPR);
    | mov64 Rq(tmp), constptr;
    | call Rq(tmp);
    MVM_jit_register_free(tc, compiler, MVM_JIT_X64_GPR, tmp);
}


MVM_JIT_TILE_DECL(call_addr) {
    MVMint8  reg = values[1]->reg_num;
    MVMint32 ofs = XS3(node+1, 1, 2);
    | call qword [Rq(reg)+ofs];
}
