#include "moar.h"
#include <dasm_proto.h>
#include <dasm_x86.h>
#include "emit.h"

|.arch x64
|.actionlist actions
|.section code
|.globals JIT_LABEL_

/* Static allocation of relevant types to registers. I pick
 * callee-save registers for efficiency. It is likely we'll be calling
 * quite a C functions, and this saves us the trouble of storing
 * them. Moreover, C compilers preferentially do not use callee-saved
 * registers, and so in most cases, these won't be touched at all. */
|.type TC, MVMThreadContext, r14
|.type FRAME, MVMFrame
|.type REGISTER, MVMRegister
|.type ARGCTX, MVMArgProcContext
|.type STATICFRAME, MVMStaticFrame
|.type COMPUNIT, MVMCompUnit
|.type CUBODY, MVMCompUnitBody
|.type P6OPAQUE, MVMP6opaque
|.type P6OBODY, MVMP6opaqueBody
|.type MVMINSTANCE, MVMInstance
|.type OBJECT, MVMObject
|.type COLLECTABLE, MVMCollectable
|.type STABLE, MVMSTable
|.type STRING, MVMString*
|.type U16, MVMuint16
|.type U32, MVMuint32
|.type U64, MVMuint64

/* 'alternative base pointer. I'll be using this often, so picking rbx
 * here rather than the extended registers will likely lead to smaller
 * bytecode */
|.type WORK, MVMRegister, rbx
|.type ARGS, MVMRegister, r12
|.type ENV,  MVMRegister, r13


|.macro saveregs
| push TC; push WORK; push ARGS; push ENV
|.endmacro

|.macro restoreregs
| pop ENV; pop ARGS; pop WORK; pop TC
|.endmacro


const MVMint32 MVM_jit_support(void) {
    return 1;
}

const unsigned char * MVM_jit_actions(void) {
    return actions;
}

const unsigned int MVM_jit_num_globals(void) {
    return JIT_LABEL__MAX;
}


/* C Call argument registers */
|.if WIN32
|.define ARG1, rcx
|.define ARG2, rdx
|.define ARG3, r8
|.define ARG4, r9
|.else
|.define ARG1, rdi
|.define ARG2, rsi
|.define ARG3, rdx
|.define ARG4, rcx
|.define ARG5, r8
|.define ARG6, r9
|.endif

/* C call argument registers for floating point */
|.if WIN32
|.define ARG1F, xmm0
|.define ARG2F, xmm1
|.define ARG3F, xmm2
|.define ARG4F, xmm3
|.else
|.define ARG1F, xmm0
|.define ARG2F, xmm1
|.define ARG3F, xmm2
|.define ARG4F, xmm3
|.define ARG5F, xmm4
|.define ARG6F, xmm5
|.define ARG7F, xmm6
|.define ARG8F, xmm7
|.endif

/* Special register for the function to be invoked 
 * (chosen because it isn't involved in argument passing
 *  and volatile) */
|.define FUNCTION, r10
/* all-purpose temporary registers */
|.define TMP1, rcx
|.define TMP2, rdx
|.define TMP3, r8
|.define TMP4, r9
|.define TMP5, r10
|.define TMP6, r11

/* return value */
|.define RV, rax
|.define RVF, xmm0

|.macro callp, funcptr
| mov64 FUNCTION, (uintptr_t)funcptr
|.if WIN32
| sub rsp, 32
| call FUNCTION
| add rsp, 32
|.else
| call FUNCTION
|.endif
|.endmacro

|.macro addarg, i, val
||switch(i) {
||    case 0:
|         mov ARG1, val
||        break;
||    case 1:
|         mov ARG2, val
||        break;
||    case 2:
|         mov ARG3, val
||        break;
||    case 3:
|         mov ARG4, val
||        break;
|.if not WIN32
||    case 4:
|         mov ARG5, val
||        break;
||    case 5:
|         mov ARG6, val
||        break;
|.endif
||    default:
||        MVM_exception_throw_adhoc(tc, "Can't JIT more than %d arguments", i);
||}
|.endmacro

|.macro addarg_f, i, val
||switch(i) {
||    case 0:
|         movsd ARG1F, qword val
||        break;
||    case 1:
|         movsd ARG2F, qword val
||        break;
||    case 2:
|         movsd ARG3F, qword val
||        break;
||    case 3:
|         movsd ARG4F, qword val
||        break;
|.if not WIN32
||    case 4:
|         movsd ARG5F, qword val
||        break;
||    case 5:
|         movsd ARG6F, qword val
||        break;
||    case 6:
|         movsd ARG7F, qword val
||        break;
||    case 7:
|         movsd ARG8F, qword val
||        break;
|.endif
||    default:
||        MVM_exception_throw_adhoc(tc, "Can't JIT more than %d arguments", i);
||}
|.endmacro

/* A function prologue is always the same in x86 / x64, becuase
 * we do not provide variable arguments, instead arguments are provided
 * via a frame. All JIT entry points receive a prologue. */
void MVM_jit_emit_prologue(MVMThreadContext *tc, MVMJitGraph *jg,
                           dasm_State **Dst) {
    /* Setup stack */
    | push rbp
    | mov rbp, rsp
    /* save callee-save registers */
    | saveregs
    /* setup special frame variables */
    | mov TC,   ARG1
    | mov WORK, FRAME:ARG2->work
    | mov ARGS, FRAME:ARG2->params.args
    | mov ENV,  FRAME:ARG2->env
}

/* And a function epilogue is also always the same */
void MVM_jit_emit_epilogue(MVMThreadContext *tc, MVMJitGraph *jg,
                           dasm_State **Dst) {
    | ->exit:
    /* restore callee-save registers */
    | restoreregs
    /* Restore stack */
    | mov rsp, rbp
    | pop rbp
    | ret
}

static MVMuint64 try_emit_gen2_ref(MVMThreadContext *tc, MVMJitGraph *jg,
                                   MVMObject *obj, MVMint16 reg, 
                                   dasm_State **Dst) {
    if (!(obj->header.flags & MVM_CF_SECOND_GEN))
        return 0;
    | mov64 TMP1, (uintptr_t)obj;
    | mov WORK[reg], TMP1;
    return 1;
}

/* compile per instruction, can't really do any better yet */
void MVM_jit_emit_primitive(MVMThreadContext *tc, MVMJitGraph *jg,
                            MVMJitPrimitive * prim, dasm_State **Dst) {
    MVMSpeshIns *ins = prim->ins;
    MVMuint16 op = ins->info->opcode;
    MVM_jit_log(tc, "emit opcode: <%s>\n", ins->info->name);
    /* Quite a few of these opcodes are copies. Ultimately, I want to
     * move copies to their own node (MVMJitCopy or such), and reduce
     * the number of copies (and thereby increase the efficiency), but
     * currently that isn't really feasible. */
    switch (op) {
    case MVM_OP_const_i64_16: {
        MVMint32 reg = ins->operands[0].reg.orig;
        /* Upgrade to 64 bit */
        MVMint64 val = (MVMint64)ins->operands[1].lit_i16;
        | mov WORK[reg], qword val;
        break;
    }
    case MVM_OP_const_i64: {
        MVMint32 reg = ins->operands[0].reg.orig;
        MVMint64 val = ins->operands[1].lit_i64;
        | mov64 TMP1, val;
        | mov WORK[reg], TMP1;
        break;
    }
    case MVM_OP_const_n64: {
        MVM_jit_log(tc, "store const %f\n", ins->operands[1].lit_n64);
        MVMint16 reg = ins->operands[0].reg.orig;
        MVMint64 valbytes = ins->operands[1].lit_i64;
        | mov64 TMP1, valbytes;
        | mov WORK[reg], TMP1;
        break;
    }
    case MVM_OP_const_s: {
         MVMint16 reg = ins->operands[0].reg.orig;
         MVMuint32 idx = ins->operands[1].lit_str_idx;
         MVMStaticFrame *sf = jg->spesh->sf;
         MVMString * s = sf->body.cu->body.strings[idx];
         if (!try_emit_gen2_ref(tc, jg, (MVMObject*)s, reg, Dst)) {
             | mov TMP1, TC->interp_cu;               // pointer to pointer
             | mov TMP1, [TMP1];                      // pointer
             | mov TMP1, COMPUNIT:TMP1->body.strings; // get strings array
             | mov TMP1, STRING:TMP1[idx];
             | mov WORK[reg], TMP1;
         }
         break;
    }
    case MVM_OP_null: {
        MVMint16 reg = ins->operands[0].reg.orig;
        | mov TMP1, TC->instance;
        | mov TMP1, MVMINSTANCE:TMP1->VMNull;
        | mov WORK[reg], TMP1;
        break;
    }
    case MVM_OP_gethow:
    case MVM_OP_getwhat: {
        MVMint16 dst = ins->operands[0].reg.orig;
        MVMint16 obj = ins->operands[0].reg.orig;
        | mov TMP1, WORK[obj];
        | mov TMP1, OBJECT:TMP1->st;
        if (op == MVM_OP_gethow) {
            | mov TMP1, STABLE:TMP1->HOW;
        } else {
            | mov TMP1, STABLE:TMP1->WHAT;
        }
        break;
    }
    case MVM_OP_getlex: {
        MVMint16 *lexical_types;
        MVMStaticFrame * sf = jg->spesh->sf;
        MVMint16 dst = ins->operands[0].reg.orig;
        MVMint16 idx = ins->operands[1].lex.idx;
        MVMint16 out = ins->operands[1].lex.outers;
        MVMint16 i;
        | mov TMP1, TC->cur_frame;
        for (i = 0; i < out; i++) {
            /* I'm going to skip compiling the check whether the outer
             * node really exists, because if the code has run N times
             * correctly, then the outer frame must have existed then,
             * and since this chain is static, it should still exist now.
             * If it doesn't exist, that means we crash. */
            | nop;
            | mov TMP1, FRAME:TMP1->outer;
            sf = sf->body.outer;
        }
        /* get array of lexicals */
        | mov TMP2, FRAME:TMP1->env;
        /* read value */
        | mov TMP2, REGISTER:TMP2[idx];
        lexical_types = (jg->spesh->lexical_types ? jg->spesh->lexical_types :
                         sf->body.lexical_types);
        if (lexical_types[idx] == MVM_reg_obj) {
            /* NB: this code path hasn't been checked. */
            /* if it is zero, check if we need to auto-vivify */        
            | test TMP2, TMP2;
            | jnz >1; 
            /* save frame and value */
            | push TMP2;
            | push TMP1;
            /* setup args */
            | mov ARG1, TC;
            | mov ARG2, [rsp+8]; // the frame, which i just pushed
            | mov ARG3, idx;
            | callp &MVM_frame_vivify_lexical;
            /* restore stack pointer */
            | add rsp, 16;
            /* use return value for the result */
            | mov TMP2, RV;
            |1:
        } 
        /* store the value */
        | mov WORK[dst], TMP2;
        break;
    }
    case MVM_OP_sp_getarg_o:
    case MVM_OP_sp_getarg_n:
    case MVM_OP_sp_getarg_s:
    case MVM_OP_sp_getarg_i: {
        MVMint32 reg = ins->operands[0].reg.orig;
        MVMuint16 idx = ins->operands[1].callsite_idx;
        | mov TMP1, ARGS[idx];
        | mov WORK[reg], TMP1;
        break;
    }
    case MVM_OP_sp_p6oget_i:
    case MVM_OP_sp_p6oget_n:
    case MVM_OP_sp_p6oget_s:
    case MVM_OP_sp_p6oget_o: {
        MVMint16 dst    = ins->operands[0].reg.orig;
        MVMint16 obj    = ins->operands[1].reg.orig;
        MVMint16 offset = ins->operands[2].callsite_idx;
        | mov TMP1, WORK[obj];
        | lea TMP1, P6OPAQUE:TMP1->body;
        | cmp qword P6OBODY:TMP1->replaced, 0;
        /* if not zero then load replacement data pointer */
        | je >1;
        | mov TMP1, P6OBODY:TMP1->replaced;
        /* otherwise do nothing (i.e. the body is our data pointer) */
        |1:
        /* load our value */
        | mov TMP1, [TMP1 + offset];
        if (op == MVM_OP_sp_p6oget_o) {
            /* transform null object pointers to VMNull */
            | cmp TMP1, 0;
            /* not-null? done */
            | jne >2;
            /* store VMNull instead */
            | mov TMP1, TC->instance;
            | mov TMP1, MVMINSTANCE:TMP1->VMNull;
            |2:
        }
        | mov WORK[dst], TMP1;
        break;
    }
    case MVM_OP_sp_p6obind_i:
    case MVM_OP_sp_p6obind_n:
    case MVM_OP_sp_p6obind_o:
    case MVM_OP_sp_p6obind_s: {
        MVMint16 obj    = ins->operands[0].reg.orig;
        MVMint16 offset = ins->operands[1].callsite_idx;
        MVMint16 val    = ins->operands[2].reg.orig;
        | mov TMP1, WORK[obj];            // object
        | mov TMP2, WORK[val];            // value
        | lea TMP3, P6OPAQUE:TMP1->body;  // body
        | cmp qword P6OBODY:TMP3->replaced, 0; 
        | je >1;
        | mov TMP3, P6OBODY:TMP3->replaced; // replaced object body
        |1:
        if (op == MVM_OP_sp_p6obind_o) {
            /* this is an assembly-version of MVM_gc_write_barrier
             * TMP1 is root, TMP2 is referenced value. And yes, this
             * should be factored out */
            // is our root second gen?
            | test word COLLECTABLE:TMP1->flags, MVM_CF_SECOND_GEN; 
            | jz >2; // if not, skip
            | cmp TMP2, 0; // is value non-null? (should be)
            | je >2; // if not, skip
            // is the reference second gen?
            | test word COLLECTABLE:TMP2->flags, MVM_CF_SECOND_GEN; 
            | jnz >2;  // if so, skip
            | push TMP2; // store value
            | push TMP3; // store body pointer
            | mov ARG1, TC;  // set tc as first argument
            // NB, c call arguments arguments clobber our temporary
            // space (depending on ABI), so I reload the work object
            // from register space 
            | mov ARG2, WORK[obj]; // object as second
            | callp &MVM_gc_write_barrier_hit; // call our function
            | pop TMP3; // restore body pointer
            | pop TMP2; // restore value
            |2: // done
        }
        | mov [TMP3+offset], TMP2; // store value into body
        break;
    }
    case MVM_OP_getwhere:
    case MVM_OP_set: {
         MVMint32 reg1 = ins->operands[0].reg.orig;
         MVMint32 reg2 = ins->operands[1].reg.orig;
         | mov TMP1, WORK[reg2]
         | mov WORK[reg1], TMP1
         break;
    }

    case MVM_OP_add_i:
    case MVM_OP_sub_i:
    case MVM_OP_mul_i:
    case MVM_OP_div_i:
    case MVM_OP_mod_i: {
        MVMint32 reg_a = ins->operands[0].reg.orig;
        MVMint32 reg_b = ins->operands[1].reg.orig;
        MVMint32 reg_c = ins->operands[2].reg.orig;
        | mov rax, WORK[reg_b];
        switch(ins->info->opcode) {
        case MVM_OP_add_i:
            | add rax, WORK[reg_c];
            break;
        case MVM_OP_sub_i:
            | sub rax, WORK[reg_c];
            break;
        case MVM_OP_mul_i:
            | imul rax, WORK[reg_c];
            break;
        case MVM_OP_div_i:
        case MVM_OP_mod_i:
            // Convert Quadword to Octoword, i.e. use rax:rdx as one
            // single 16 byte register
            | cqo; 
            | idiv qword WORK[reg_c];
            break;
        }
        if (ins->info->opcode == MVM_OP_mod_i) {
            // result of modula is stored in rdx
            | mov WORK[reg_a], rdx;
        } else {
            // all others in rax
            | mov WORK[reg_a], rax;
        }
        break;
    }
    case MVM_OP_inc_i: {
         MVMint32 reg = ins->operands[0].reg.orig;
         | inc qword WORK[reg];
         break;
    }
    case MVM_OP_dec_i: {
        MVMint32 reg = ins->operands[0].reg.orig;
        | dec qword WORK[reg];
        break;
    }
    case MVM_OP_add_n:
    case MVM_OP_sub_n:
    case MVM_OP_mul_n:
    case MVM_OP_div_n: {
        MVMint16 reg_a = ins->operands[0].reg.orig;
        MVMint16 reg_b = ins->operands[1].reg.orig;
        MVMint16 reg_c = ins->operands[2].reg.orig;
        /* Copying data to xmm (floating point) registers requires
         * a special move instruction */
        | movsd xmm0, qword WORK[reg_b];
        switch(ins->info->opcode) {
        case MVM_OP_add_n:
            | addsd xmm0, qword WORK[reg_c];
            break;
        case MVM_OP_sub_n:
            | subsd xmm0, qword WORK[reg_c];
            break;
        case MVM_OP_mul_n:
            | mulsd xmm0, qword WORK[reg_c];
            break;
        case MVM_OP_div_n:
            | divsd xmm0, qword WORK[reg_c];
            break;
        }
        | movsd qword WORK[reg_a], xmm0;
        break;
    }
    case MVM_OP_coerce_in: {
        MVMint16 dst = ins->operands[0].reg.orig;
        MVMint16 src = ins->operands[1].reg.orig;
        /* convert simple integer to double precision */
        | cvtsi2sd xmm0, qword WORK[src];
        | movsd qword WORK[dst], xmm0;
        break;
    }
    case MVM_OP_coerce_ni: {
        MVMint16 dst = ins->operands[0].reg.orig;
        MVMint16 src = ins->operands[1].reg.orig;
        /* convert double precision to simple intege */
        | cvttsd2si rax, qword WORK[src];
        | mov WORK[dst], rax;
        break;
    }
    case MVM_OP_eq_i:
    case MVM_OP_eqaddr:
    case MVM_OP_ne_i:
    case MVM_OP_lt_i:
    case MVM_OP_le_i:
    case MVM_OP_gt_i:
    case MVM_OP_ge_i: {
        MVMint32 reg_a = ins->operands[0].reg.orig;
        MVMint32 reg_b = ins->operands[1].reg.orig;
        MVMint32 reg_c = ins->operands[2].reg.orig;
        | mov rax, WORK[reg_b];
        /* comparison result in the setting bits in the rflags register */
        | cmp rax, WORK[reg_c];
        /* copy the right comparison bit to the lower byte of the rax register */
        switch(ins->info->opcode) {
        case MVM_OP_eqaddr:
        case MVM_OP_eq_i:
            | sete al;
            break;
        case MVM_OP_ne_i:
            | setne al;
            break;
        case MVM_OP_lt_i:
            | setl al;
            break;
        case MVM_OP_le_i:
            | setle al;
            break;
        case MVM_OP_gt_i:
            | setg al;
            break;
        case MVM_OP_ge_i:
            | setge al;
            break;
        }
        /* zero extend al (lower byte) to rax (whole register) */
        | movzx rax, al;
        | mov WORK[reg_a], rax; 
        break;
    }
    default:
        MVM_exception_throw_adhoc(tc, "Can't JIT opcode");
    }
}

void MVM_jit_emit_call_c(MVMThreadContext *tc, MVMJitGraph *jg,
                         MVMJitCallC * call_spec, dasm_State **Dst) {
    int i;
    MVMJitAddr *args = call_spec->args;
    MVM_jit_log(tc, "emit c call <%d args>\n", call_spec->num_args);
    if (call_spec->has_vargs) {
        MVM_exception_throw_adhoc(tc, "JIT can't handle varargs yet");
    }
    /* first, add arguments */
    for (i = 0; i < call_spec->num_args; i++) {
        switch (args[i].base) {
        case MVM_JIT_ADDR_STACK: /* unlikely to use this now, though */
            | addarg i, [rbp-args[i].idx];
            break;
        case MVM_JIT_ADDR_INTERP:
            MVM_jit_log(tc, "emit interp call arg %d %d \n", i, args[i].idx);
            switch (args[i].idx) {
            case MVM_JIT_INTERP_TC:
                | addarg i, TC;
                 break;
            case MVM_JIT_INTERP_FRAME:
                | addarg i, TC->cur_frame;
                break;
            case MVM_JIT_INTERP_CU:
                | mov rax, TC->interp_cu;
                | addarg i, [rax];
                break;
            }
            break;
        case MVM_JIT_ADDR_REG:
            | addarg i, WORK[args[i].idx];
            break;
        case MVM_JIT_ADDR_REG_F:
            | addarg_f i, WORK[args[i].idx];
            break;
        case MVM_JIT_ADDR_LITERAL:
            | addarg i, args[i].idx;
            break;
        }
    }
    /* Emit the call. I think we should be able to do something smarter than
     * store the constant into the bytecode, like a data segment. But I'm
     * not sure. */
     | callp call_spec->func_ptr
}

void MVM_jit_emit_branch(MVMThreadContext *tc, MVMJitGraph *jg,
                         MVMJitBranch * branch, dasm_State **Dst) {
    MVMSpeshIns *ins = branch->ins;
    MVMint32 name = branch->dest.name;
    if (ins == NULL || ins->info->opcode == MVM_OP_goto) {
        MVM_jit_log(tc, "emit jump to label %d\n", name);
        if (name == MVM_JIT_BRANCH_EXIT) {
            | jmp ->exit
        } else {
            | jmp =>(name)
        }
    } else {
        MVMint16 reg = ins->operands[0].reg.orig;
        MVM_jit_log(tc, "emit branch <%s> to label %d\n",
                    ins->info->name, name);
        switch(ins->info->opcode) {
        case MVM_OP_if_i:
            | mov rax, WORK[reg];
            | test rax, rax;
            | jnz =>(name); // jump to dynamic label
            break;
        case MVM_OP_unless_i:
            | mov rax, WORK[reg];
            | test rax, rax;
            | jz =>(name);
            break;
        default:
            MVM_exception_throw_adhoc(tc, "JIT: Can't handle conditional <%s>",
                                      ins->info->name);
        }
    }
}

void MVM_jit_emit_label(MVMThreadContext *tc, MVMJitGraph *jg,
                        MVMJitLabel *label, dasm_State **Dst) {
    | =>(label->name):
}

void MVM_jit_emit_rvh(MVMThreadContext *tc, MVMJitGraph *jg,
                      MVMJitRVH *rvh, dasm_State **Dst) {
    switch(rvh->mode) {
    case MVM_JIT_RV_VAL_TO_REG:
        | mov WORK[rvh->addr.idx], RV;
        break;
    case MVM_JIT_RV_VAL_TO_REG_F:
        | movsd qword WORK[rvh->addr.idx], RVF;
        break;
    case MVM_JIT_RV_REF_TO_REG:
        | mov TMP1, [RV]; // maybe add an offset?
        | mov WORK[rvh->addr.idx], TMP1;
        break;
    case MVM_JIT_RV_REG_TO_PTR:
        | mov TMP1, WORK[rvh->addr.idx];
        | mov [RV], TMP1;
        break;
    }
}
