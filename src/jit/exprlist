# SYNTAX: opcode ':' s-exp
#    s-exp represents tree

# Number with dollars stand for the arguments of the opcode.  The
# opcode preprocessor inserts loads, and immediate nodes for arguments
# automatically.

(template: const_i16 (copy $1))
(template: const_i64 (copy $1))
(template: set (copy $1))
(template: add_i (add $1 $2))
(template: sub_i (sub $1 $2))

(template: inc_i (add $0 (const 1 (&sizeof MVMint64))))
(template: dec_i (sub $0 (const 1 (&sizeof MVMint64))))

# Macro for getting frame arg address
(macro: ^parg (,a) (idx (load (addr (frame) (&offsetof MVMFrame params.args))) ,a reg_sz))
# we should read this too
(template: sp_getarg_o (load (^parg $1) ptr_sz))
(template: sp_getarg_i (load (^parg $1) (&sizeof MVMint64)))

(macro: ^p6obody (,a) (let (($replace (load (addr ,a (&offsetof MVMP6opaque body.replaced)) ptr_sz)))
                      (if (nz $replace)
                           $replace
                           (addr ,a (&offsetof MVMP6opaque body)))))

(template: sp_p6oget_i (load (add (^p6obody $1) $2) (&sizeof MVMint64)))
(template: sp_p6oget_n (load (add (^p6obody $1) $2) (&sizeof MVMnum64)))
(template: sp_p6oget_s (load (add (^p6obody $1) $2) ptr_sz))
(template: sp_p6obind_i (store (add (^p6obody $0) $1) $2 reg_sz))
(template: sp_p6obind_n (store (add (^p6obody $0) $1) $2 reg_sz))


(template: null_s (const 0 ptr_sz))
(template: null (vmnull))
                                 
(macro: ^stable (,a) (load (addr ,a (&offsetof MVMObject st))))
(template: getwhat (load (addr (^stable $1) (&offsetof MVMSTable WHAT)) ptr_sz))
(template: getwho  (let (($who (load (addr (^stable $1) (&offsetof MVMSTable WHO)) ptr_sz)))
                         (ifelse (nz $who) $who (vmnull))))

(macro: ^func (,a) (const (&CONST_PTR ,a) ptr_sz))
(template: say (call (^func &MVM_string_say)
                     (arglist 2 (carg (tc) ptr_sz)
                                (carg $0 ptr_sz))
                     void))

(macro: ^cu_string (,a) (idx (load (addr (cu) (&offsetof MVMCompUnit body.strings)) ptr_sz)
                                    ,a ptr_sz))

(template: getlex_no (let (($res (call (^func &MVM_frame_find_lexical_by_name)
                                       (arglist 3 (carg (tc) ptr_sz)
                                                  (carg (load (^cu_string $1) ptr_sz) ptr_sz)
                                                  (carg 8 ptr_sz))
                                       reg_val)))
                           (ifelse (nz $res) (load $res ptr_sz) $res)))

(macro: ^spesh_slot (,a) (idx (load (addr (frame) (&offsetof MVMFrame effective_spesh_slots)))
                               ,a ptr_sz))
