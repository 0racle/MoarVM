# SYNTAX: opcode ':' s-exp
#    s-exp represents tree

# Number with dollars stand for the arguments of the opcode.  The
# opcode preprocessor inserts loads, and immediate nodes for arguments
# automatically.

const_i16:   (copy $1) 
const_i64:   (copy $1)
set:         (copy $1)
getwhat:     (load (addr (load (addr $1 (&offsetof MVMObject st)) ptr_sz)
                         (&offsetof MVMSTable WHAT)) ptr_sz)
# getwho is getwhat with a nonzero check
getwho:      (let (($who
                    (load (addr (load (addr $1 (&offsetof MVMObject st)) ptr_sz)
                         (&offsetof MVMSTable WHAT)) ptr_sz)))
                  (ifelse (nz $who) $who (vmnull)))
# This is perhaps a bit long for a simple function
say:         (call (const (&funcptr &MVM_string_say) ptr_sz)
                   (arglist 2 (carg (tc) ptr_sz)
                              (carg $1 reg_val))
                    void)
add_i:       (add $1 $2)
sub_i:       (sub $1 $2)
inc_i:       (add $1 (const 1 (&sizeof MVMint64)))
dec_i:       (sub $1 (const 1 (&sizeof MVMint64)))
sp_getarg_o: (load (idx (fargs) $1 reg_sz) ptr_sz)
sp_getarg_i: (load (idx (fargs) $1 reg_sz) (&sizeof MVMint64))
null_s:      (const 0 ptr_sz)
null:        (vmnull)
# str = cu->body.strings[$1]; $res = MVM_frame_find_lecial_by_name(tc, $str, MVM_reg_obj)
getlex_no:   (let (($str (load (idx (load (addr (cu)
                                          (&offsetof MVMCompUnit body.strings)) ptr_sz)
                                      $1 ptr_sz) ptr_sz))
                   ($res (call (&funcptr &MVM_frame_find_lexical_by_name)
                               (arglist 3 (carg (tc) ptr_sz)
                                          (carg $str ptr_sz)
                                          (carg 8 ptr_sz))
                               reg_val)))
                   (ifelse (nz $res) (load $res ptr_sz) $res))