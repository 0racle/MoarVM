# SYNTAX: (keyword: opcode (tree $substitutions))

# Number with dollars stand for the arguments of the opcode.  The
# opcode preprocessor inserts loads, and immediate nodes for arguments
# automatically.

(template: const_i16 (copy $1))
(template: const_i64_16 (copy $1))
(template: const_i64_32 (copy $1))
(template: const_i64 (copy $1))

(macro: ^getf (,object ,type ,field)
   (load (addr ,object (&offsetof ,type ,field)) (&SIZEOF_MEMBER ,type ,field)))
(macro: ^setf (,object ,type ,field ,value)
    (store (addr ,object (&offsetof ,type ,field)) ,value (&SIZEOF_MEMBER ,type ,field)))


(macro: ^cu_string (,a) (idx  (^getf (cu) MVMCompUnit body.strings) ,a ptr_sz))
(template: const_s (load (^cu_string $1) ptr_sz))

(template: set (copy $1))
(template: getlex (copy $1))
(template: bindlex (store $0 $1 reg_sz))

(template: add_i (add $1 $2))
(template: sub_i (sub $1 $2))
(template: inc_i (add (load $0 int_sz) (const 1 int_sz)))
(template: dec_i (sub (load $0 int_sz) (const 1 int_sz)))

(macro: ^frame () (^getf (tc) MVMThreadContext cur_frame))

(macro: ^parg (,a) (idx (^getf (^frame) MVMFrame params.args) ,a reg_sz))
(template: sp_getarg_o (load (^parg $1) ptr_sz))
(template: sp_getarg_s (load (^parg $1) ptr_sz))
(template: sp_getarg_i (load (^parg $1) int_sz))
(template: sp_getarg_n (load (^parg $1) int_sz))

(macro: ^params () (addr (^frame) (&offsetof MVMFrame params)))
(macro: ^caller () (addr (^frame) (&offsetof MVMFrame caller)))

# get spesh slot address
(macro: ^spesh_slot (,a)
   (idx (^getf (^frame) MVMFrame effective_spesh_slots) ,a ptr_sz))

(template: sp_getspeshslot (load (^spesh_slot $1) ptr_sz))

(template: null_s (const 0 ptr_sz))

(macro: ^vmnull ()
    (^getf
          (^getf (tc) MVMThreadContext instance)
          MVMInstance VMNull))

(template: null (^vmnull))

(macro: ^stable (,a) (^getf ,a MVMObject st))

(template: getwhat (^getf (^stable $1) MVMSTable WHAT))

(macro: ^hllconfig ()
    (^getf (cu) MVMCompUnit body.hll_config))

(template: hllboxtype_i
    (^getf (^hllconfig) MVMHLLConfig int_box_type))

(template: hllboxtype_s
    (^getf (^hllconfig) MVMHLLConfig str_box_type))

(template: hllboxtype_n
    (^getf (^hllconfig) MVMHLLConfig num_box_type))


(template: curcode
    (^getf (^frame) MVMFrame code_ref))


# Relatively harmless branches, I think

(template: unless_i
    (when
        (zr $0)
        (branch (label $1)
    )))

(template: if_i
    (when
        (nz $0)
        (branch (label $1)
    )))

(template: ifnonnull
    (when (all 2
              (nz $0) (ne $0 (^vmnull)))
        (branch (label $1))))

(template: goto (branch (label $0)))

(macro: ^exit () (branch (label (const branch_exit int_sz))))

(macro: ^p6obody (,a) (let: (($replace (^getf ,a MVMP6opaque body.replaced)))
                      (if (nz $replace)
                              $replace
                              (addr ,a (&offsetof MVMP6opaque body)))))

(template: sp_p6oget_i (load (add (^p6obody $1) $2) int_sz))
(template: sp_p6oget_n (load (add (^p6obody $1) $2) (&sizeof MVMnum64)))
(template: sp_p6oget_s (load (add (^p6obody $1) $2) ptr_sz))
(template: sp_p6oget_o
           (let: (($val (load (add (^p6obody $1) $2) ptr_sz)))
                (if (nz $val) $val (^vmnull))))

(template: getwho 
   (let: (($who (^getf (^stable $1) MVMSTable WHO)))
     (if (nz $who) $who (^vmnull))))
